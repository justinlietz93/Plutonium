"""
Vulnerability checker module.

This module provides functionality to fetch vulnerability data for dependencies
using external vulnerability databases like the VulnCheck NVD++ API.
"""

import requests
import logging
import time
from typing import List
from threading import Lock

from .constants import DEFAULT_TIMEOUT


class VulnerabilityChecker:
    """Class to fetch vulnerability data for dependencies."""
    
    # Simplified rate limiting: 10 requests per second as a precaution
    RATE_LIMIT_REQUESTS = 10
    RATE_LIMIT_SECONDS = 1
    
    def __init__(self, api_key: str = None):
        """
        Initialize the vulnerability checker.
        
        Args:
            api_key: Not required for VulnCheck NVD++ community access, included for compatibility
        """
        self.logger = logging.getLogger("vulnerability_checker")
        self.api_key = api_key  # Not used for VulnCheck, but kept for potential future use
        self.logger.info("Using VulnCheck NVD++ API for vulnerability data")
        
        # Rate limiting state
        self.request_timestamps = []
        self.lock = Lock()
    
    def _enforce_rate_limit(self):
        """
        Enforce a simplified rate limit as a precaution.
        """
        with self.lock:
            current_time = time.time()
            # Remove timestamps older than RATE_LIMIT_SECONDS
            self.request_timestamps = [t for t in self.request_timestamps if current_time - t < self.RATE_LIMIT_SECONDS]
            
            # If we've made too many requests, wait
            if len(self.request_timestamps) >= self.RATE_LIMIT_REQUESTS:
                oldest_request = self.request_timestamps[0]
                sleep_time = (self.RATE_LIMIT_SECONDS - (current_time - oldest_request)) + 0.1  # Small buffer
                if sleep_time > 0:
                    self.logger.debug(f"Rate limit reached, sleeping for {sleep_time:.2f} seconds")
                    time.sleep(sleep_time)
                # Refresh timestamps after sleeping
                current_time = time.time()
                self.request_timestamps = [t for t in self.request_timestamps if current_time - t < self.RATE_LIMIT_SECONDS]
            
            # Add the current request timestamp
            self.request_timestamps.append(current_time)
    
    def fetch_vulnerabilities(self, package_name: str, version: str, environment: str) -> List[str]:
        """
        Fetch known vulnerabilities for a package from the VulnCheck NVD++ API.
        
        Args:
            package_name: The name of the package
            version: The version of the package
            environment: The environment (e.g., "Node.js", "Python")
            
        Returns:
            A list of CVE IDs associated with the package version
        """
        # Construct a CPE identifier (simplified for this example)
        # CPE format: cpe:2.3:a:vendor:product:version:*:*:*:*:*:*:*
        vendor = package_name.split('/')[-1].split('-')[0]  # Simplified vendor extraction
        product = package_name.split('/')[-1]
        cpe = f"cpe:2.3:a:{vendor}:{product}:{version}:*:*:*:*:*:*:*"
        self.logger.debug(f"Fetching vulnerabilities for CPE: {cpe} in environment: {environment}")
        
        # Enforce rate limiting as a precaution
        self._enforce_rate_limit()
        
        try:
            # VulnCheck NVD++ API endpoint for vulnerability search
            url = f"https://nvd2.api.vulncheck.com/rest/json/cves/2.0?cpeName={cpe}"
            headers = {}  # No API key required for VulnCheck NVD++ community access
            self.logger.debug(f"Sending request to VulnCheck NVD++ API: URL={url}, Headers={headers}, Proxies={requests.sessions.Session().proxies}")
            response = requests.get(url, headers=headers, timeout=DEFAULT_TIMEOUT)
            response.raise_for_status()
            
            data = response.json()
            vulnerabilities = []
            if "vulnerabilities" in data:
                for vuln in data["vulnerabilities"]:
                    if "cve" in vuln and "id" in vuln["cve"]:
                        vulnerabilities.append(vuln["cve"]["id"])
            
            return vulnerabilities if vulnerabilities else ["None"]
        
        except requests.RequestException as e:
            self.logger.error(f"Error fetching vulnerabilities for {package_name} {version}: {str(e)}")
            if hasattr(e, 'response') and e.response is not None:
                self.logger.error(f"Response content: {e.response.text}")
            return ["Error fetching"]
        except (ValueError, KeyError) as e:
            self.logger.error(f"Error processing VulnCheck NVD++ response for {package_name} {version}: {str(e)}")
            return ["Error processing"]